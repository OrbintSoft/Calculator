<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="[operand 1] [operator] [operand 2]" xml:space="preserve">
    <value>[operandi 1] [operatore] [operando 2]</value>
  </data>
  <data name="-f (--file) [File path of input file] [opcode, default: 0 (Addition)]" xml:space="preserve">
    <value>-f (--file) [Percorso del file di ingresso] [opcode, default: 0 (Addizione)]</value>
  </data>
  <data name="-h (--help) / -? Prints list of commands" xml:space="preserve">
    <value>-h (--help) / -? Stampa la lista dei comandi</value>
  </data>
  <data name="-i (--interactive) The programs works in console interactive mode, follow display istructions" xml:space="preserve">
    <value>-i (--interactive) Il programma lavora in modalità interattiva, segui le istruzioni mostrate in console</value>
  </data>
  <data name="Addition" xml:space="preserve">
    <value>Addizione</value>
  </data>
  <data name="Allowed operations in expression:" xml:space="preserve">
    <value>Operazioni consentite nell'espressione:</value>
  </data>
  <data name="Brackets are not mandatory be operator order is respected" xml:space="preserve">
    <value>Le parentesi non sono obbligatorie se l'ordine degli operatori è rispettato</value>
  </data>
  <data name="Chose an operation" xml:space="preserve">
    <value>Scegli un'operazione</value>
  </data>
  <data name="Division" xml:space="preserve">
    <value>Divisione</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Errore</value>
  </data>
  <data name="ex: 2 + 4" xml:space="preserve">
    <value>es: 2 + 4</value>
  </data>
  <data name="Expression" xml:space="preserve">
    <value>Espressione</value>
  </data>
  <data name="Expression input format:" xml:space="preserve">
    <value>Formato di ingresso dell'espressione:</value>
  </data>
  <data name="Expression syntax:" xml:space="preserve">
    <value>Sintassi dell'espressione:</value>
  </data>
  <data name="Input File not found" xml:space="preserve">
    <value>File di ingresso non trovato</value>
  </data>
  <data name="Insert the desidered expression:" xml:space="preserve">
    <value>Inserisci l'espressione desiderata:</value>
  </data>
  <data name="Insert the operand {0}:" xml:space="preserve">
    <value>Inserisci l'operando {0}:</value>
  </data>
  <data name="Logarithm" xml:space="preserve">
    <value>Logaritmo</value>
  </data>
  <data name="Multiplication" xml:space="preserve">
    <value>Moltiplicazione</value>
  </data>
  <data name="No argument provided, type --help to get list of available commands" xml:space="preserve">
    <value>Non è stato fornito nessun comando, digita --help per ottenere la lista dei comandi disponibili</value>
  </data>
  <data name="Operation not supported" xml:space="preserve">
    <value>Operazione non supportata</value>
  </data>
  <data name="Operator order:" xml:space="preserve">
    <value>Ordine degli operatori:</value>
  </data>
  <data name="Power" xml:space="preserve">
    <value>Potenza</value>
  </data>
  <data name="Result: {0}" xml:space="preserve">
    <value>Risultato: {0}</value>
  </data>
  <data name="Root" xml:space="preserve">
    <value>Radice</value>
  </data>
  <data name="Substraction" xml:space="preserve">
    <value>Sottrazione</value>
  </data>
  <data name="type 'q' to quit the program" xml:space="preserve">
    <value>digita 'q' per chiudere il programma</value>
  </data>
  <data name="Wrong arguments provided, type --help to get list of available commands" xml:space="preserve">
    <value>Parametri forniti non corretti, digita --help per ottenere la lista dei comandi disponibili</value>
  </data>
  <data name="Wrong number of arguments" xml:space="preserve">
    <value>Numero sbagliato di parametri</value>
  </data>
  <data name="[(] Open an expressione, [)] close an expression" xml:space="preserve">
    <value>[(] Apri un espression, [)] chiudi un espressione</value>
  </data>
  <data name="[*] Multiplication, ex: 2 * 3 = 6" xml:space="preserve">
    <value>[*] Moltiplicazione, es: 2 * 3 = 6</value>
  </data>
  <data name="[+] Addition,       ex: 2 + 3 = 5" xml:space="preserve">
    <value>[+] Addizione,       es: 2 + 3 = 5</value>
  </data>
  <data name="[-] Substraction,   ex: 5 - 3 = 2" xml:space="preserve">
    <value>[-] Sottrazione,   es: 5 - 3 = 2</value>
  </data>
  <data name="[.] is the decimal separator, ex: 23.4577" xml:space="preserve">
    <value>[.] è il separatore decimale, ex: 23.4577</value>
  </data>
  <data name="[/] Division,       ex: 6 / 3 = 2" xml:space="preserve">
    <value>[/] Divisione,       es: 6 / 3 = 2</value>
  </data>
  <data name="[l] Logarithm,      ex: 8 l 2 = 3" xml:space="preserve">
    <value>[l] Logaritmo,      es: 8 l 2 = 3</value>
  </data>
  <data name="[r] Root,           ex: 8 r 3 = 2" xml:space="preserve">
    <value>[r] Radice,           es: 8 r 3 = 2</value>
  </data>
  <data name="[^] Power,          ex: 2 ^ 3 = 8" xml:space="preserve">
    <value>[^] Potenza,          es: 2 ^ 3 = 8</value>
  </data>
  <data name="{0} is not a valid number" xml:space="preserve">
    <value>{0} non è un numero valido</value>
  </data>
  <data name="{0}: Addition" xml:space="preserve">
    <value>{0}: Addizione</value>
  </data>
  <data name="{0}: Division" xml:space="preserve">
    <value>{0}: Divisione</value>
  </data>
  <data name="{0}: Expression" xml:space="preserve">
    <value>{0}: Espressione</value>
  </data>
  <data name="{0}: Logarithm" xml:space="preserve">
    <value>{0}: Logaritmo</value>
  </data>
  <data name="{0}: Multiplication" xml:space="preserve">
    <value>{0}: Moltiplicazione</value>
  </data>
  <data name="{0}: Power" xml:space="preserve">
    <value>{0}: Potenza</value>
  </data>
  <data name="{0}: Root" xml:space="preserve">
    <value>{0}: Radice</value>
  </data>
  <data name="{0}: Substraction" xml:space="preserve">
    <value>{0}: Sottrazione</value>
  </data>
  <data name="([operand 1] [operator] [operand 2]) [operator] [operand 3]" xml:space="preserve">
    <value>([operando 1] [operatore] [operando 2]) [operatore] [operando 3]</value>
  </data>
</root>